#!/usr/bin/env python3

# Solving Lorenz System with Python

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

# System Coefficients:
rho = 28.0
sigma = 10.0
beta = 8.0 / 3.0


def f(state, t):
    x, y, z = state  # Unpack the state vector
    
    xdot=sigma * (y - x)
    ydot=x * (rho - z) - y
    zdot=x * y - beta * z 
    
    return xdot, ydot, zdot  # Derivatives

state0 = [1.0, 1.0, 1.0]
t = np.arange(0.0, 100.0, 0.01)

states = odeint(f, state0, t)

x=states[:,0]
y=states[:,1]
z=states[:,2]

fig = plt.figure()
ax = fig.gca(projection="3d")


ax.plot(x, y, z,'b')
ax.plot(state0[0],state0[1],state0[2],'*')

ax.set_xlim([-25,25])
ax.set_ylim([-25,25])
ax.set_zlim([0,50])

ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Z axis')

plt.draw()
plt.show()
